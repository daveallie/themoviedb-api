---
http_interactions:
- request:
    method: get
    uri: http://api.themoviedb.org/3/search/multi?api_key=c29379565234e20d7cbf4f2e835c3e41&language=en&query=Disney
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - rest-client/2.1.0 (darwin19.4.0 x86_64) ruby/2.7.1p83
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.themoviedb.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Date:
      - Sun, 28 Jun 2020 05:23:01 GMT
      Server:
      - openresty
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Methods:
      - GET, HEAD, POST, PUT, DELETE, OPTIONS
      Access-Control-Expose-Headers:
      - ETag, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, Retry-After,
        Content-Length, Content-Range
      Cache-Control:
      - public, max-age=120
      Vary:
      - Accept-Encoding
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 88f40be442aecae39e92819a37969961.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - XOUzqf0bXQC_tNZRHTjBuLKprMy4tsmaWW9l76cQub5dSc2-W-LYZg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sun, 28 Jun 2020 05:23:01 GMT
recorded_with: VCR 6.0.0
