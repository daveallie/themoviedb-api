---
http_interactions:
- request:
    method: get
    uri: http://api.themoviedb.org/3/movie/now_playing?api_key=c29379565234e20d7cbf4f2e835c3e41&language=en
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - rest-client/2.1.0 (darwin19.4.0 x86_64) ruby/2.7.1p83
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.themoviedb.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Date:
      - Sun, 28 Jun 2020 05:22:52 GMT
      Server:
      - openresty
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Methods:
      - GET, HEAD, POST, PUT, DELETE, OPTIONS
      Access-Control-Expose-Headers:
      - ETag, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, Retry-After,
        Content-Length, Content-Range
      Cache-Control:
      - public, max-age=21600
      Vary:
      - Accept-Encoding
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 e3cb2b95dc77970fa884677fa82b833f.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - NqtNgxRAqWQfLW4fHk-XSiG8VsAKYkDBpm2Uz8lzw1vIm7DQjvpucQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJyZXN1bHRzIjpbeyJwb3B1bGFyaXR5IjoxNTIuNzg0LCJ2b3RlX2NvdW50Ijo0NjEsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcL3RJOG9jQURoMjJHdFFGVjI4dkdIYUJaVmIwVS5qcGciLCJpZCI6NDc1NDMwLCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcL28wRjh4QXQ4WXVFbTVtRVp2aVg1cEVGQzEyeS5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJBcnRlbWlzIEZvd2wiLCJnZW5yZV9pZHMiOlsxMiwxNCw4NzgsMTA3NTFdLCJ0aXRsZSI6IkFydGVtaXMgRm93bCIsInZvdGVfYXZlcmFnZSI6Niwib3ZlcnZpZXciOiJBcnRlbWlzIEZvd2wgaXMgYSAxMi15ZWFyLW9sZCBnZW5pdXMgYW5kIGRlc2NlbmRhbnQgb2YgYSBsb25nIGxpbmUgb2YgY3JpbWluYWwgbWFzdGVybWluZHMuIEhlIHNvb24gZmluZHMgaGltc2VsZiBpbiBhbiBlcGljIGJhdHRsZSBhZ2FpbnN0IGEgcmFjZSBvZiBwb3dlcmZ1bCB1bmRlcmdyb3VuZCBmYWlyaWVzIHdobyBtYXkgYmUgYmVoaW5kIGhpcyBmYXRoZXIncyBkaXNhcHBlYXJhbmNlLiIsInJlbGVhc2VfZGF0ZSI6IjIwMjAtMDYtMTIifSx7InBvcHVsYXJpdHkiOjkzLjM5OCwidm90ZV9jb3VudCI6MjEsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcL3Vja3RnYmFNU2FFVFVETFVCcDF1YkdENmFOai5qcGciLCJpZCI6NjE5NTkyLCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcL2pBdE80Y2k4VHI1akRtZzMzWEYzT1o4VlBhaC5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJGb3JjZSBvZiBOYXR1cmUiLCJnZW5yZV9pZHMiOlsyOCwxOF0sInRpdGxlIjoiRm9yY2Ugb2YgTmF0dXJlIiwidm90ZV9hdmVyYWdlIjo1LjUsIm92ZXJ2aWV3IjoiQSBnYW5nIG9mIHRoaWV2ZXMgcGxhbiBhIGhlaXN0IGR1cmluZyBhIGh1cnJpY2FuZSBhbmQgZW5jb3VudGVyIHRyb3VibGUgd2hlbiBhIGRpc2dyYWNlZCBjb3AgdHJpZXMgdG8gZm9yY2UgZXZlcnlvbmUgaW4gdGhlIGJ1aWxkaW5nIHRvIGV2YWN1YXRlLiIsInJlbGVhc2VfZGF0ZSI6IjIwMjAtMDctMDIifSx7InBvcHVsYXJpdHkiOjc4LjIyNywidm90ZV9jb3VudCI6MjEsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcL3UxMktUaGZEWnBCR1E5OFFnN2FoV3ZNVjlncS5qcGciLCJpZCI6NTU0OTkzLCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcL29DRmJoNE1yZDBmdUdhbkNnSUY2c0cyN1dHRC5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6InN2Iiwib3JpZ2luYWxfdGl0bGUiOiJCcml0dC1NYXJpZSB2YXIgaMOkciIsImdlbnJlX2lkcyI6WzM1LDE4XSwidGl0bGUiOiJCcml0dC1NYXJpZSBXYXMgSGVyZSIsInZvdGVfYXZlcmFnZSI6NSwib3ZlcnZpZXciOiJCcml0dC1NYXJpZSwgYSB3b21hbiBpbiBoZXIgc2l4dGllcywgZGVjaWRlcyB0byBsZWF2ZSBoZXIgaHVzYmFuZCBhbmQgc3RhcnQgYW5ldy4gSGF2aW5nIGJlZW4gaG91c2V3aWZlIGZvciBtb3N0IG9mIGhlciBsaWZlIGFuZCBhbmQgbGl2aW5nIGluIHNtYWxsIGJhY2t3YXRlciB0b3duIG9mIEJvcmcsIHRoZXJlIGlzbid0IG1hbnkgam9icyBhdmFpbGFibGUgYW5kIHNvb24gc2hlIGZpbmRzIGhlcnNlbGYgZmVuZGluZyBhIHlvdXRoIGZvb3RiYWxsIHRlYW0uIiwicmVsZWFzZV9kYXRlIjoiMjAxOS0wMS0yNSJ9LHsicG9wdWxhcml0eSI6NzIuMzEsInZvdGVfY291bnQiOjc3LCJ2aWRlbyI6ZmFsc2UsInBvc3Rlcl9wYXRoIjoiXC9mT3ZxRXVudWJMM3dQc2t2dGsyRmljZmwwcEguanBnIiwiaWQiOjQ1MTE4NCwiYWR1bHQiOmZhbHNlLCJiYWNrZHJvcF9wYXRoIjoiXC83MnI0dUFRR3NhOEtFdjBEQjJUcFN1MzFsRUIuanBnIiwib3JpZ2luYWxfbGFuZ3VhZ2UiOiJlbiIsIm9yaWdpbmFsX3RpdGxlIjoiV2FzcCBOZXR3b3JrIiwiZ2VucmVfaWRzIjpbMTgsMzYsNTNdLCJ0aXRsZSI6Ildhc3AgTmV0d29yayIsInZvdGVfYXZlcmFnZSI6Ni41LCJvdmVydmlldyI6IkhhdmFuYSwgQ3ViYSwgMTk5MC4gUmVuw6kgR29uesOhbGV6LCBhbiBhaXJwbGFuZSBwaWxvdCwgdW5leHBlY3RlZGx5IGZsZWVzIHRoZSBjb3VudHJ5LCBsZWF2aW5nIGJlaGluZCBoaXMgd2lmZSBPbGdhIGFuZCBoaXMgZGF1Z2h0ZXIgSXJtYSwgYW5kIGJlZ2lucyBhIG5ldyBsaWZlIGluIE1pYW1pLCB3aGVyZSBoZSBiZWNvbWVzIGEgbWVtYmVyIG9mIGFuIGFudGktQ2FzdHJvIG9yZ2FuaXphdGlvbi4iLCJyZWxlYXNlX2RhdGUiOiIyMDIwLTAxLTI5In0seyJwb3B1bGFyaXR5Ijo2Ny44MzUsInZvdGVfY291bnQiOjIzNDIsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcL2Y0YXVsM0Z5RDNqdjN2NGJ1bDFJcmtXWnZ6cS5qcGciLCJpZCI6NTA4NDM5LCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcL2RXNnlCdUt3aU1lcm9uSlp3OGtvellMTW9yQi5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJPbndhcmQiLCJnZW5yZV9pZHMiOlsxMiwxNiwzNSwxNCwxMDc1MV0sInRpdGxlIjoiT253YXJkIiwidm90ZV9hdmVyYWdlIjo3LjksIm92ZXJ2aWV3IjoiSW4gYSBzdWJ1cmJhbiBmYW50YXN5IHdvcmxkLCB0d28gdGVlbmFnZSBlbGYgYnJvdGhlcnMgZW1iYXJrIG9uIGFuIGV4dHJhb3JkaW5hcnkgcXVlc3QgdG8gZGlzY292ZXIgaWYgdGhlcmUgaXMgc3RpbGwgYSBsaXR0bGUgbWFnaWMgbGVmdCBvdXQgdGhlcmUuIiwicmVsZWFzZV9kYXRlIjoiMjAyMC0wMi0yOSJ9LHsicG9wdWxhcml0eSI6NTYuMTk3LCJ2b3RlX2NvdW50Ijo5OTUsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcL3d4UGhuNGVmMUVBbzVuanh3QmtBRVZybEpKRy5qcGciLCJpZCI6NTE0ODQ3LCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcL25hWFVEejBWR0s3YWFQbEVwc3VZVzhrTlZzci5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJUaGUgSHVudCIsImdlbnJlX2lkcyI6WzI4LDI3LDUzXSwidGl0bGUiOiJUaGUgSHVudCIsInZvdGVfYXZlcmFnZSI6Ni42LCJvdmVydmlldyI6IlR3ZWx2ZSBzdHJhbmdlcnMgd2FrZSB1cCBpbiBhIGNsZWFyaW5nLiBUaGV5IGRvbid0IGtub3cgd2hlcmUgdGhleSBhcmXigJRvciBob3cgdGhleSBnb3QgdGhlcmUuIEluIHRoZSBzaGFkb3cgb2YgYSBkYXJrIGludGVybmV0IGNvbnNwaXJhY3kgdGhlb3J5LCBydXRobGVzcyBlbGl0aXN0cyBnYXRoZXIgYXQgYSByZW1vdGUgbG9jYXRpb24gdG8gaHVudCBodW1hbnMgZm9yIHNwb3J0LiBCdXQgdGhlaXIgbWFzdGVyIHBsYW4gaXMgYWJvdXQgdG8gYmUgZGVyYWlsZWQgd2hlbiBvbmUgb2YgdGhlIGh1bnRlZCB0dXJucyB0aGUgdGFibGVzIG9uIGhlciBwdXJzdWVycy4iLCJyZWxlYXNlX2RhdGUiOiIyMDIwLTAzLTExIn0seyJwb3B1bGFyaXR5Ijo2NC4yNDksInZvdGVfY291bnQiOjI3MTAsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcLzhXVVZIZW1IRkgyWklQNk5Xa3dsSFdzeXJFTC5qcGciLCJpZCI6MzM4NzYyLCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcL2xQNWVLaDhXT2NQeXNmRUxyVXBHaEhKR1pFSC5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJCbG9vZHNob3QiLCJnZW5yZV9pZHMiOlsyOCw4NzhdLCJ0aXRsZSI6IkJsb29kc2hvdCIsInZvdGVfYXZlcmFnZSI6Nywib3ZlcnZpZXciOiJBZnRlciBoZSBhbmQgaGlzIHdpZmUgYXJlIG11cmRlcmVkLCBtYXJpbmUgUmF5IEdhcnJpc29uIGlzIHJlc3VycmVjdGVkIGJ5IGEgdGVhbSBvZiBzY2llbnRpc3RzLiBFbmhhbmNlZCB3aXRoIG5hbm90ZWNobm9sb2d5LCBoZSBiZWNvbWVzIGEgc3VwZXJodW1hbiwgYmlvdGVjaCBraWxsaW5nIG1hY2hpbmXigJQnQmxvb2RzaG90Jy4gQXMgUmF5IGZpcnN0IHRyYWlucyB3aXRoIGZlbGxvdyBzdXBlci1zb2xkaWVycywgaGUgY2Fubm90IHJlY2FsbCBhbnl0aGluZyBmcm9tIGhpcyBmb3JtZXIgbGlmZS4gQnV0IHdoZW4gaGlzIG1lbW9yaWVzIGZsb29kIGJhY2sgYW5kIGhlIHJlbWVtYmVycyB0aGUgbWFuIHRoYXQga2lsbGVkIGJvdGggaGltIGFuZCBoaXMgd2lmZSwgaGUgYnJlYWtzIG91dCBvZiB0aGUgZmFjaWxpdHkgdG8gZ2V0IHJldmVuZ2UsIG9ubHkgdG8gZGlzY292ZXIgdGhhdCB0aGVyZSdzIG1vcmUgdG8gdGhlIGNvbnNwaXJhY3kgdGhhbiBoZSB0aG91Z2h0LiIsInJlbGVhc2VfZGF0ZSI6IjIwMjAtMDMtMDUifSx7InBvcHVsYXJpdHkiOjYyLjAyLCJ2b3RlX2NvdW50IjoyLCJ2aWRlbyI6ZmFsc2UsInBvc3Rlcl9wYXRoIjoiXC9jZ0M2N1NPeGQ5eGtqTjRCbnZqdHVqMXZJOFQuanBnIiwiaWQiOjY2MzQ1OSwiYWR1bHQiOmZhbHNlLCJiYWNrZHJvcF9wYXRoIjoiXC92TFgxZmM3NWg0Q0pWakFYUHRoMVNsQnlCVHEuanBnIiwib3JpZ2luYWxfbGFuZ3VhZ2UiOiJlbiIsIm9yaWdpbmFsX3RpdGxlIjoiSnVuZ2xlIEJlYXQ6IFRoZSBNb3ZpZSIsImdlbnJlX2lkcyI6WzE2XSwidGl0bGUiOiJKdW5nbGUgQmVhdDogVGhlIE1vdmllIiwidm90ZV9hdmVyYWdlIjo1LjUsIm92ZXJ2aWV3IjoiVGhlIEp1bmdsZSBCZWF0IGFuaW1hbHMgdGhpbmsgaXTigJlzIHRoZSBiZXN0IHRoaW5nIGV2ZXIgd2hlbiBhbiBhbGllbiBhcnJpdmVzIGluIHRoZSBqdW5nbGUgYnJpbmdpbmcgd2l0aCBoaW0gdGhlIHBvd2VyIG9mIHNwZWVjaC4gVGhleSBhbHNvIHN1cnByaXNpbmdseSB0aGluayBpdOKAmXMgdGhlIGJlc3QgdGhpbmcgZXZlciB3aGVuIHRoZXkgZmluZCBvdXQgdGhhdCBoZeKAmXMgYmVlbiBzZW50IHRvIGNvbnF1ZXIgdGhlbS4iLCJyZWxlYXNlX2RhdGUiOiIyMDIwLTA2LTI2In0seyJwb3B1bGFyaXR5Ijo0MS42MzgsInZvdGVfY291bnQiOjE4OTMsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcL2tUUTNKOG9UVEtvZkFWTFluZHMyY0hVejlLTy5qcGciLCJpZCI6NTIyOTM4LCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcLzNJSHF3RU5HeE9iMzZKZ2VvdDRYSHMzQlR4ei5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJSYW1ibzogTGFzdCBCbG9vZCIsImdlbnJlX2lkcyI6WzI4LDE4LDUzXSwidGl0bGUiOiJSYW1ibzogTGFzdCBCbG9vZCIsInZvdGVfYXZlcmFnZSI6Ni4zLCJvdmVydmlldyI6IkFmdGVyIGZpZ2h0aW5nIGhpcyBkZW1vbnMgZm9yIGRlY2FkZXMsIEpvaG4gUmFtYm8gbm93IGxpdmVzIGluIHBlYWNlIG9uIGhpcyBmYW1pbHkgcmFuY2ggaW4gQXJpem9uYSwgYnV0IGhpcyByZXN0IGlzIGludGVycnVwdGVkIHdoZW4gR2FicmllbGEsIHRoZSBncmFuZGRhdWdodGVyIG9mIGhpcyBob3VzZWtlZXBlciBNYXLDrWEsIGRpc2FwcGVhcnMgYWZ0ZXIgY3Jvc3NpbmcgdGhlIGJvcmRlciBpbnRvIE1leGljbyB0byBtZWV0IGhlciBiaW9sb2dpY2FsIGZhdGhlci4gUmFtYm8sIHdobyBoYXMgYmVjb21lIGEgdHJ1ZSBmYXRoZXIgZmlndXJlIGZvciBHYWJyaWVsYSBvdmVyIHRoZSB5ZWFycywgdW5kZXJ0YWtlcyBhIGRlc3BlcmF0ZSBhbmQgZGFuZ2Vyb3VzIGpvdXJuZXkgdG8gZmluZCBoZXIuIiwicmVsZWFzZV9kYXRlIjoiMjAxOS0wOS0xOSJ9LHsicG9wdWxhcml0eSI6NDIuMDM5LCJ2b3RlX2NvdW50Ijo0NzEsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcL3RJcEdROXV1SUk3UVZGRjBHSENGVEpGZlh2ZS5qcGciLCJpZCI6NTU1OTc0LCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcL3JwR1lIb3dYdGp3MzdVeGR3TzFaY0s1RThJTi5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJCcmFobXM6IFRoZSBCb3kgSUkiLCJnZW5yZV9pZHMiOlsyNyw5NjQ4LDUzXSwidGl0bGUiOiJCcmFobXM6IFRoZSBCb3kgSUkiLCJ2b3RlX2F2ZXJhZ2UiOjYuNCwib3ZlcnZpZXciOiJBZnRlciBhIGZhbWlseSBtb3ZlcyBpbnRvIHRoZSBIZWVsc2hpcmUgTWFuc2lvbiwgdGhlaXIgeW91bmcgc29uIHNvb24gbWFrZXMgZnJpZW5kcyB3aXRoIGEgbGlmZS1saWtlIGRvbGwgY2FsbGVkIEJyYWhtcy4iLCJyZWxlYXNlX2RhdGUiOiIyMDIwLTAyLTIwIn0seyJwb3B1bGFyaXR5Ijo0NC4yNDksInZvdGVfY291bnQiOjEzMzYsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcL2d6bGJiM3llVklTcFEzUkVkM0dhMXNjV0dUVS5qcGciLCJpZCI6NDQzNzkxLCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcL3d3N2VDM0JxU2JGc3lFNUg1cU1kZThXa3hKMi5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJVbmRlcndhdGVyIiwiZ2VucmVfaWRzIjpbMjgsMjcsODc4LDUzXSwidGl0bGUiOiJVbmRlcndhdGVyIiwidm90ZV9hdmVyYWdlIjo2LjQsIm92ZXJ2aWV3IjoiQWZ0ZXIgYW4gZWFydGhxdWFrZSBkZXN0cm95cyB0aGVpciB1bmRlcndhdGVyIHN0YXRpb24sIHNpeCByZXNlYXJjaGVycyBtdXN0IG5hdmlnYXRlIHR3byBtaWxlcyBhbG9uZyB0aGUgZGFuZ2Vyb3VzLCB1bmtub3duIGRlcHRocyBvZiB0aGUgb2NlYW4gZmxvb3IgdG8gbWFrZSBpdCB0byBzYWZldHkgaW4gYSByYWNlIGFnYWluc3QgdGltZS4iLCJyZWxlYXNlX2RhdGUiOiIyMDIwLTAxLTA4In0seyJwb3B1bGFyaXR5Ijo0My40NjYsInZvdGVfY291bnQiOjIsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcL3VTOXF4ZUN1UDFXVFl5dGR5UXk5YnlkVGdJaS5qcGciLCJpZCI6NTkxNzc0LCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcL2NTVnNHSkNEQjJUWjNhSk1ydmZPSW5XOGpxZy5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJSdW4gd2l0aCB0aGUgSHVudGVkIiwiZ2VucmVfaWRzIjpbODAsMTgsNTNdLCJ0aXRsZSI6IlJ1biB3aXRoIHRoZSBIdW50ZWQiLCJ2b3RlX2F2ZXJhZ2UiOjMuNSwib3ZlcnZpZXciOiJPc2NhciwgYSB5b3VuZyBib3ksIGNvbW1pdHMgYSBub2JsZSBtdXJkZXIgYW5kIGlzIGZvcmNlZCB0byBydW5hd2F5IGZyb20gaGlzIHJ1cmFsIGhvbWV0b3duLCBsZWF2aW5nIGJlaGluZCBoaXMgYmVzdCBmcmllbmQsIExvdXguIEhlIGVzY2FwZXMgdG8gdGhlIG5lYXJlc3QgY2l0eSwgd2hlcmUgaGUgaXMgaW5kdWN0ZWQgaW50byBhIGdhbmcgb2YgY2hpbGQgc3RyZWV0IHRoaWV2ZXMuIEhpcyBpbm5vY2VuY2Ugc2xpcHMgYXdheSBhcyBoZSBpcyBpbnRyb2R1Y2VkIHRvIGxvdmUsIG11cmRlciwgYW5kIGNvcnJ1cHRpb24uIDE1IHllYXJzIGxhdGVyLCBoZSBoYXMgZm9yZ290dGVuIGhpcyBwYXN0IGFuZCBiZWNvbWUgdGhlIGxlYWRlciBvZiB0aGlzIGJhbmQgb2YgbG9zdCBjaGlsZHJlbi4gV2hlbiBMb3V4IG1vdmVzIHRvIHRoZSBjaXR5IGluIHNlYXJjaCBvZiB3b3JrLCBzaGUgdGFrZXMgYSBqb2Igd2l0aCBhIHN0cnVnZ2xpbmcgcHJpdmF0ZSBpbnZlc3RpZ2F0b3IuIFN0dW1ibGluZyB1cG9uIE9zY2FyJ3MgbWlzc2luZyBjaGlsZCByZXBvcnQsIHNoZSB0YWtlcyBpdCB1cG9uIGhlcnNlbGYgdG8gZmluZCB0aGUgYm95IHdobyBzYXZlZCBoZXIgbGlmZS4iLCJyZWxlYXNlX2RhdGUiOiIyMDIwLTA2LTI2In0seyJwb3B1bGFyaXR5Ijo0OS42MTYsInZvdGVfY291bnQiOjgsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcL3pRRmpNbUUzSzlBWDVRckJMMVNYSXhZUTlqei5qcGciLCJpZCI6NTc5NTgzLCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcLzVyd2NkMjRHR2x0S2lxZFBUNEcyZG1jaExyOS5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJUaGUgS2luZyBvZiBTdGF0ZW4gSXNsYW5kIiwiZ2VucmVfaWRzIjpbMzUsMThdLCJ0aXRsZSI6IlRoZSBLaW5nIG9mIFN0YXRlbiBJc2xhbmQiLCJ2b3RlX2F2ZXJhZ2UiOjcuMiwib3ZlcnZpZXciOiJTY290dCBoYXMgYmVlbiBhIGNhc2Ugb2YgYXJyZXN0ZWQgZGV2ZWxvcG1lbnQgZXZlciBzaW5jZSBoaXMgZmlyZWZpZ2h0ZXIgZmF0aGVyIGRpZWQgd2hlbiBoZSB3YXMgc2V2ZW4uIEhl4oCZcyBub3cgcmVhY2hlZCBoaXMgbWlkLTIwcyBoYXZpbmcgYWNoaWV2ZWQgbGl0dGxlLCBjaGFzaW5nIGEgZHJlYW0gb2YgYmVjb21pbmcgYSB0YXR0b28gYXJ0aXN0IHRoYXQgc2VlbXMgZmFyIG91dCBvZiByZWFjaC4gQXMgaGlzIGFtYml0aW91cyB5b3VuZ2VyIHNpc3RlciBoZWFkcyBvZmYgdG8gY29sbGVnZSwgU2NvdHQgaXMgc3RpbGwgbGl2aW5nIHdpdGggaGlzIGV4aGF1c3RlZCBFUiBudXJzZSBtb3RoZXIgYW5kIHNwZW5kcyBoaXMgZGF5cyBzbW9raW5nIHdlZWQsIGhhbmdpbmcgd2l0aCB0aGUgZ3V5cyDigJQgT3NjYXIsIElnb3IgYW5kIFJpY2hpZSDigJQgYW5kIHNlY3JldGx5IGhvb2tpbmcgdXAgd2l0aCBoaXMgY2hpbGRob29kIGZyaWVuZCBLZWxzZXkuIEJ1dCB3aGVuIGhpcyBtb3RoZXIgc3RhcnRzIGRhdGluZyBhIGxvdWRtb3V0aCBmaXJlZmlnaHRlciBuYW1lZCBSYXksIGl0IHNldHMgb2ZmIGEgY2hhaW4gb2YgZXZlbnRzIHRoYXQgd2lsbCBmb3JjZSBTY290dCB0byBncmFwcGxlIHdpdGggaGlzIGdyaWVmIGFuZCB0YWtlIGhpcyBmaXJzdCB0ZW50YXRpdmUgc3RlcHMgdG93YXJkIG1vdmluZyBmb3J3YXJkIGluIGxpZmUuIiwicmVsZWFzZV9kYXRlIjoiMjAyMC0wNy0wMSJ9LHsicG9wdWxhcml0eSI6NDMuMDAzLCJ2b3RlX2NvdW50Ijo0MjYsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcL215ZjNxenBlTjBKYnVGUlB3U3BKY3o3cm1BVC5qcGciLCJpZCI6NDU4MzA1LCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcL2paNFlkRENuZks0Y08xM2RvOUo0SmFUOGQyTy5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJWaXZhcml1bSIsImdlbnJlX2lkcyI6WzI3LDg3OCw1M10sInRpdGxlIjoiVml2YXJpdW0iLCJ2b3RlX2F2ZXJhZ2UiOjUuOSwib3ZlcnZpZXciOiJBIHlvdW5nIHdvbWFuIGFuZCBoZXIgZmlhbmPDqSBhcmUgaW4gc2VhcmNoIG9mIHRoZSBwZXJmZWN0IHN0YXJ0ZXIgaG9tZS4gQWZ0ZXIgZm9sbG93aW5nIGEgbXlzdGVyaW91cyByZWFsIGVzdGF0ZSBhZ2VudCB0byBhIG5ldyBob3VzaW5nIGRldmVsb3BtZW50LCB0aGUgY291cGxlIGZpbmRzIHRoZW1zZWx2ZXMgdHJhcHBlZCBpbiBhIG1hemUgb2YgaWRlbnRpY2FsIGhvdXNlcyBhbmQgZm9yY2VkIHRvIHJhaXNlIGFuIG90aGVyd29ybGRseSBjaGlsZC4iLCJyZWxlYXNlX2RhdGUiOiIyMDE5LTA3LTEyIn0seyJwb3B1bGFyaXR5IjozMC42MjEsInZvdGVfY291bnQiOjIsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcLzNCMnR3dDhJMDJjTEFQSEc2ZGtEcFRGYmd6NS5qcGciLCJpZCI6NTIxNTMxLCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcLzJqemFGbExWRzYzVzFsY3U1a0V4eXBMZXk5VC5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJGb2xsb3dlZCIsImdlbnJlX2lkcyI6WzI3LDk2NDgsNTNdLCJ0aXRsZSI6IkZvbGxvd2VkIiwidm90ZV9hdmVyYWdlIjoyLjUsIm92ZXJ2aWV3IjoiVG8gZ2FpbiBtb3JlIHN1YnNjcmliZXJzLCBhIGNvbnRyb3ZlcnNpYWwgdmxvZ2dlciBzdGF5cyBhdCBhIGN1cnNlZCBob3RlbCB3aXRoIHRlcnJpZnlpbmcgcmVzdWx0cy4iLCJyZWxlYXNlX2RhdGUiOiIyMDIwLTA2LTI2In0seyJwb3B1bGFyaXR5IjozNi4yMjgsInZvdGVfY291bnQiOjAsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcL2dvRVc2UXFvRnhOSTJwZmJwVnFtWGoyV1h3ZC5qcGciLCJpZCI6NTMxODc2LCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOm51bGwsIm9yaWdpbmFsX2xhbmd1YWdlIjoiZW4iLCJvcmlnaW5hbF90aXRsZSI6IlRoZSBPdXRwb3N0IiwiZ2VucmVfaWRzIjpbMTgsMzYsMTA3NTJdLCJ0aXRsZSI6IlRoZSBPdXRwb3N0Iiwidm90ZV9hdmVyYWdlIjowLCJvdmVydmlldyI6IkEgc21hbGwgdW5pdCBvZiBVLlMuIHNvbGRpZXJzLCBhbG9uZSBhdCB0aGUgcmVtb3RlIENvbWJhdCBPdXRwb3N0IEtlYXRpbmcsIGxvY2F0ZWQgZGVlcCBpbiB0aGUgdmFsbGV5IG9mIHRocmVlIG1vdW50YWlucyBpbiBBZmdoYW5pc3RhbiwgYmF0dGxlcyB0byBkZWZlbmQgYWdhaW5zdCBhbiBvdmVyd2hlbG1pbmcgZm9yY2Ugb2YgVGFsaWJhbiBmaWdodGVycyBpbiBhIGNvb3JkaW5hdGVkIGF0dGFjay4gVGhlIEJhdHRsZSBvZiBLYW1kZXNoLCBhcyBpdCB3YXMga25vd24sIHdhcyB0aGUgYmxvb2RpZXN0IEFtZXJpY2FuIGVuZ2FnZW1lbnQgb2YgdGhlIEFmZ2hhbiBXYXIgaW4gMjAwOSBhbmQgQnJhdm8gVHJvb3AgMy02MSBDQVYgYmVjYW1lIG9uZSBvZiB0aGUgbW9zdCBkZWNvcmF0ZWQgdW5pdHMgb2YgdGhlIDE5LXllYXIgY29uZmxpY3QuIiwicmVsZWFzZV9kYXRlIjoiMjAyMC0wNi0yNCJ9LHsicG9wdWxhcml0eSI6MzIuMTA1LCJ2b3RlX2NvdW50Ijo4LCJ2aWRlbyI6ZmFsc2UsInBvc3Rlcl9wYXRoIjoiXC9oNGNQVlZOUFpVSFZlb0Y2ZEgyZ3JCdlNFS3MuanBnIiwiaWQiOjUwNzQ0MSwiYWR1bHQiOmZhbHNlLCJiYWNrZHJvcF9wYXRoIjoiXC9rejZKTlVEaE14NzhRdVpsenRwMFVIbXo1eGcuanBnIiwib3JpZ2luYWxfbGFuZ3VhZ2UiOiJlbiIsIm9yaWdpbmFsX3RpdGxlIjoiU2VhIEZldmVyIiwiZ2VucmVfaWRzIjpbMjcsODc4LDUzXSwidGl0bGUiOiJTZWEgRmV2ZXIiLCJ2b3RlX2F2ZXJhZ2UiOjUuMSwib3ZlcnZpZXciOiJUaGUgY3JldyBvZiBhIFdlc3Qgb2YgSXJlbGFuZCB0cmF3bGVy4oCUbWFyb29uZWQgYXQgc2Vh4oCUc3RydWdnbGUgZm9yIHRoZWlyIGxpdmVzIGFnYWluc3QgYSBncm93aW5nIHBhcmFzaXRlIGluIHRoZWlyIHdhdGVyIHN1cHBseS4iLCJyZWxlYXNlX2RhdGUiOiIyMDIwLTA2LTEyIn0seyJwb3B1bGFyaXR5IjozNy41MDIsInZvdGVfY291bnQiOjE3MjY1LCJ2aWRlbyI6ZmFsc2UsInBvc3Rlcl9wYXRoIjoiXC9mODlVM0FEcjFvaUIxczlHa2RQT0VwWFVrNUguanBnIiwiaWQiOjYwMywiYWR1bHQiOmZhbHNlLCJiYWNrZHJvcF9wYXRoIjoiXC9CeURmMHpqTFN1bXoxTVAxY0RFbzJKV1Z0VS5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJUaGUgTWF0cml4IiwiZ2VucmVfaWRzIjpbMjgsODc4XSwidGl0bGUiOiJUaGUgTWF0cml4Iiwidm90ZV9hdmVyYWdlIjo4LjEsIm92ZXJ2aWV3IjoiU2V0IGluIHRoZSAyMm5kIGNlbnR1cnksIFRoZSBNYXRyaXggdGVsbHMgdGhlIHN0b3J5IG9mIGEgY29tcHV0ZXIgaGFja2VyIHdobyBqb2lucyBhIGdyb3VwIG9mIHVuZGVyZ3JvdW5kIGluc3VyZ2VudHMgZmlnaHRpbmcgdGhlIHZhc3QgYW5kIHBvd2VyZnVsIGNvbXB1dGVycyB3aG8gbm93IHJ1bGUgdGhlIGVhcnRoLiIsInJlbGVhc2VfZGF0ZSI6IjE5OTktMDMtMzAifSx7InBvcHVsYXJpdHkiOjMzLjkwMiwidm90ZV9jb3VudCI6MTgsInZpZGVvIjpmYWxzZSwicG9zdGVyX3BhdGgiOiJcL3VDRGNRYmZJS1k0b1RQZDZ0YmdobG9GbTdHaS5qcGciLCJpZCI6NjA2Njc5LCJhZHVsdCI6ZmFsc2UsImJhY2tkcm9wX3BhdGgiOiJcL2FWWDlhNTRZRm1yY0VIQVR1YnB1RlFRS241TC5qcGciLCJvcmlnaW5hbF9sYW5ndWFnZSI6ImVuIiwib3JpZ2luYWxfdGl0bGUiOiJUaGUgSGlnaCBOb3RlIiwiZ2VucmVfaWRzIjpbMzUsMTgsMTA0MDIsMTA3NDldLCJ0aXRsZSI6IlRoZSBIaWdoIE5vdGUiLCJ2b3RlX2F2ZXJhZ2UiOjcuOCwib3ZlcnZpZXciOiJTZXQgaW4gdGhlIGRhenpsaW5nIHdvcmxkIG9mIHRoZSBMQSBtdXNpYyBzY2VuZSBjb21lcyB0aGUgc3Rvcnkgb2YgR3JhY2UgRGF2aXMsIGEgc3VwZXJzdGFyIHdob3NlIHRhbGVudCwgYW5kIGVnbywgaGF2ZSByZWFjaGVkIHVuYmVsaWV2YWJsZSBoZWlnaHRzLiBNYWdnaWUgaXMgR3JhY2XigJlzIG92ZXJ3b3JrZWQgcGVyc29uYWwgYXNzaXN0YW50IHdob+KAmXMgc3R1Y2sgcnVubmluZyBlcnJhbmRzLCBidXQgc3RpbGwgYXNwaXJlcyB0byBoZXIgY2hpbGRob29kIGRyZWFtIG9mIGJlY29taW5nIGEgbXVzaWMgcHJvZHVjZXIuIFdoZW4gR3JhY2XigJlzIG1hbmFnZXIgcHJlc2VudHMgaGVyIHdpdGggYSBjaG9pY2UgdGhhdCBjb3VsZCBhbHRlciB0aGUgY291cnNlIG9mIGhlciBjYXJlZXIsIE1hZ2dpZSBhbmQgR3JhY2UgY29tZSB1cCB3aXRoIGEgcGxhbiB0aGF0IGNvdWxkIGNoYW5nZSB0aGVpciBsaXZlcyBmb3JldmVyLiIsInJlbGVhc2VfZGF0ZSI6IjIwMjAtMDYtMTAifSx7InBvcHVsYXJpdHkiOjI3LjM2Niwidm90ZV9jb3VudCI6NzMwLCJ2aWRlbyI6ZmFsc2UsInBvc3Rlcl9wYXRoIjoiXC8ya05uZjdCd1JDRW00YmNGa2RpRTBUNFUyNXMuanBnIiwiaWQiOjQ1NzMzNSwiYWR1bHQiOmZhbHNlLCJiYWNrZHJvcF9wYXRoIjoiXC94QkhUSGtOTDFVcmhjOEs4Tkh6SWloN3VuanMuanBnIiwib3JpZ2luYWxfbGFuZ3VhZ2UiOiJlbiIsIm9yaWdpbmFsX3RpdGxlIjoiR3VucyBBa2ltYm8iLCJnZW5yZV9pZHMiOlsyOCwzNV0sInRpdGxlIjoiR3VucyBBa2ltYm8iLCJ2b3RlX2F2ZXJhZ2UiOjYuNCwib3ZlcnZpZXciOiJBbiBvcmRpbmFyeSBndXkgc3VkZGVubHkgZmluZHMgaGltc2VsZiBmb3JjZWQgdG8gZmlnaHQgYSBnbGFkaWF0b3ItbGlrZSBiYXR0bGUgZm9yIGEgZGFyayB3ZWJzaXRlIHRoYXQgc3RyZWFtcyB0aGUgdmlvbGVuY2UgZm9yIHZpZXdlcnMuIE1pbGVzIG11c3QgZmlnaHQgaGVhdmlseSBhcm1lZCBOaXggYW5kIGFsc28gc2F2ZSBoaXMga2lkbmFwcGVkIGV4LWdpcmxmcmllbmQuIiwicmVsZWFzZV9kYXRlIjoiMjAxOS0wOS0wOSJ9XSwicGFnZSI6MSwidG90YWxfcmVzdWx0cyI6NTQyLCJkYXRlcyI6eyJtYXhpbXVtIjoiMjAyMC0wNy0wMyIsIm1pbmltdW0iOiIyMDIwLTA1LTE2In0sInRvdGFsX3BhZ2VzIjoyOH0=
  recorded_at: Sun, 28 Jun 2020 05:22:52 GMT
recorded_with: VCR 6.0.0
